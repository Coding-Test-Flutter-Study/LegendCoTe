import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {


    static int w,h;
    static int count;
    static int[][] map;
    static boolean[][] visited;

    static int[] dx = {0,0,1,-1,1,1,-1,-1};
    static int[] dy = {1,-1,0,0,1,-1,1,-1};

    static BufferedReader br = new BufferedReader(new InputStreamReader((System.in)));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

    public static void main(String[] args) throws IOException {

        while (true){
            StringTokenizer st = new StringTokenizer(br.readLine());

            w= Integer.parseInt(st.nextToken());
            h = Integer.parseInt(st.nextToken());

            map = new int[h][w];
            visited = new boolean[h][w];

            if(w==0&&h==0){
                break;
            } else {
                //map 채우기
                for(int i=0; i<h;i++){
                    StringTokenizer st2 = new StringTokenizer(br.readLine());
                    for(int j=0; j<w;j++){
                        map[i][j]= Integer.parseInt(st2.nextToken());
                    }
                }

                for(int i=0; i<h;i++){
                    for(int j=0; j<w;j++){

                        if(!visited[i][j]&&map[i][j]==1){
                            dfs(i,j,visited);
                            count++;
                        }
                    }
                }
            }
            bw.write(count+"\n");
            count=0;
        }

        bw.flush();
    }

    static void dfs(int x, int y,boolean[][] visited){

        visited[x][y]=true;

        for(int i=0; i<8;i++){
            int newX = x+dx[i];
            int newY = y+dy[i];

            if(newX>=0&&newY>=0&&newX<h&&newY<w&&!visited[newX][newY]&&map[newX][newY]==1){
                visited[newX][newY]=true;
                dfs(newX,newY,visited);

            }
        }
    }
}
