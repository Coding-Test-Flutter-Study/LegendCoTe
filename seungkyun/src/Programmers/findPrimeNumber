import java.util.HashSet;

class Solution {
    static int answer;

    static HashSet<Integer> hashSet = new HashSet<>();

    public int solution(String numbers) {

        boolean[] visited = new boolean[numbers.length()];

        dfs("0",numbers,visited);




        return hashSet.size();
    }

    static void dfs(String num, String numbers, boolean[] visited){


        if(num.length()-1<=numbers.length()){

            boolean ok = true;

            for(int j=2; j<Integer.parseInt(num);j++){
                if(Integer.parseInt(num)%j==0){{
                    ok=false;
                    break;
                }}
            }
            //소수 조건
            if(ok&&Integer.parseInt(num)!=1&&Integer.parseInt(num)!=0||ok&&Integer.parseInt(num)==2){
            hashSet.add(Integer.parseInt(num));
             }

             for(int i=0; i<numbers.length();i++){
             if(!visited[i]){
                 visited[i] = true;
                 dfs(num+numbers.charAt(i),numbers,visited);
                 visited[i] = false;
            }
        }
        }


    }
}